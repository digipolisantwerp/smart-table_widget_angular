{"ast":null,"code":"import { EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { SmartTableFilter } from './smart-table.filter';\nimport * as i0 from \"@angular/core\";\nexport let AbstractFilterComponent = /*#__PURE__*/(() => {\n  class AbstractFilterComponent {\n    constructor() {\n      this.optional = false;\n      this.update = new EventEmitter();\n      this.formControl = new FormControl();\n      this.destroy$ = new Subject();\n      this.id = `filter-${_.uniqueId()}`;\n      this.formControl.valueChanges.pipe(takeUntil(this.destroy$), debounceTime(200), tap(newValue => this.onFilter(newValue))).subscribe();\n    }\n    ngOnChanges(changes) {\n      if (!!changes.filter.currentValue) {\n        this.update.pipe(takeUntil(this.destroy$), tap(value => this.filter.valueChanges$.next(value))).subscribe();\n      }\n    }\n    onFilter(value) {\n      if (this.filter) {\n        this.filter.value = value;\n      }\n      this.update.emit({\n        filter: this.filter,\n        value\n      });\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n      this.destroy$.complete();\n    }\n  }\n  AbstractFilterComponent.ɵfac = function AbstractFilterComponent_Factory(t) {\n    return new (t || AbstractFilterComponent)();\n  };\n  AbstractFilterComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AbstractFilterComponent,\n    factory: AbstractFilterComponent.ɵfac\n  });\n  return AbstractFilterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}