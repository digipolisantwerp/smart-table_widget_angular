{"ast":null,"code":"import { LocalstorageService } from '@acpaas-ui/ngx-localstorage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@acpaas-ui/ngx-localstorage\";\nexport let StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor(localstorageService) {\n      this.localstorageService = localstorageService;\n    }\n    getConfiguration(defaultConfiguration) {\n      if (!(defaultConfiguration && defaultConfiguration.options && defaultConfiguration.options.storageIdentifier && defaultConfiguration.options.persistTableConfig)) {\n        return defaultConfiguration;\n      }\n      const obj = this.getStoredItem(defaultConfiguration.options.storageIdentifier);\n      const config = Object.assign({}, defaultConfiguration);\n      if (obj && obj.columns && Array.isArray(obj.columns)) {\n        const localStorageColumns = (obj.columns || []).filter(column => !!defaultConfiguration.columns.find(c => c.key === column.key)).map(column => {\n          const found = defaultConfiguration.columns.find(c => c.key === column.key);\n          // Do not replace existing columns, but override properties\n          return Object.assign(Object.assign({}, found), column);\n        });\n        const columnsNotInStorage = defaultConfiguration.columns.filter(column => !localStorageColumns.some(c => c.key === column.key));\n        config.columns = [...localStorageColumns, ...columnsNotInStorage];\n      }\n      if (obj && obj.options && obj.options) {\n        config.options = Object.assign(Object.assign({}, config.options), obj.options);\n      }\n      return config;\n    }\n    persistConfiguration(id, configuration) {\n      if (!(configuration && configuration.options && configuration.options.storageIdentifier && configuration.options.persistTableConfig)) {\n        return;\n      }\n      // tslint:disable-next-line:no-console\n      console.info('Info: persisting table configuration to storage.');\n      const name = configuration.options.storageIdentifier;\n      const obj = this.getStoredItem(name);\n      obj.columns = [...configuration.columns];\n      obj.options = Object.assign(Object.assign({}, obj.options), {\n        defaultSortOrder: configuration.options.defaultSortOrder\n      });\n      this.setItemToStorage(name, obj);\n    }\n    setItemToStorage(name, object) {\n      this.localstorageService.storage.setItem(name, JSON.stringify(object));\n    }\n    getStoredItem(name) {\n      let storageObj = this.localstorageService.storage.getItem(name);\n      try {\n        storageObj = !storageObj ? {} : JSON.parse(storageObj);\n        return storageObj;\n      } catch (err) {\n        console.warn(err);\n        return {};\n      }\n    }\n  }\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(i1.LocalstorageService));\n  };\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}