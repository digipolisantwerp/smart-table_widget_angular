{"ast":null,"code":"import { combineLatest, concat, merge, of, Subject } from 'rxjs';\nimport { filter, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { TableFactory } from './table.factory';\nimport { sortColumn } from '../helper/helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./table.factory\";\nexport let ConfigurationService = /*#__PURE__*/(() => {\n  class ConfigurationService {\n    constructor(factory) {\n      this.factory = factory;\n      this._config$ = {};\n      this._setConfig$ = {};\n    }\n    initConfiguration(param) {\n      const {\n        id,\n        backendCallback,\n        storageCallback,\n        customConfiguration$\n      } = param;\n      this._setConfig$[id] = new Subject();\n      this._config$[id] = concat(backendCallback(),\n      // First get the default configuration\n      merge(customConfiguration$.pipe(\n      // And then override with configuration we get from the user\n      filter(config => !!config), switchMap(customConfig => combineLatest([of(customConfig), this.getConfiguration(id)]).pipe(first())), map(([customConfig, configuration]) => {\n        // Whenever we have custom configuration coming in, override existing configuration\n        return Object.assign(Object.assign(Object.assign({}, configuration), customConfig), {\n          options: Object.assign(Object.assign({}, configuration.options), customConfig.options)\n        });\n      }),\n      // Only override with stored configuration on custom configuration coming in\n      switchMap(config => config && config.options.persistTableConfig ? storageCallback(config) : of(config))), this._setConfig$[id])).pipe(shareReplay(1));\n    }\n    getConfiguration(id) {\n      return this._config$[id];\n    }\n    setConfiguration(id, configuration) {\n      if (!this._setConfig$[id]) {\n        return;\n      }\n      this._setConfig$[id].next(configuration);\n    }\n    getColumns(id, columnTypes) {\n      return this.getConfiguration(id).pipe(map(config => config.columns.sort(sortColumn).map(columnConfig => this.factory.createTableColumnFromConfig(columnConfig, columnTypes, config.options))));\n    }\n  }\n  ConfigurationService.ɵfac = function ConfigurationService_Factory(t) {\n    return new (t || ConfigurationService)(i0.ɵɵinject(i1.TableFactory));\n  };\n  ConfigurationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigurationService,\n    factory: ConfigurationService.ɵfac\n  });\n  return ConfigurationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}