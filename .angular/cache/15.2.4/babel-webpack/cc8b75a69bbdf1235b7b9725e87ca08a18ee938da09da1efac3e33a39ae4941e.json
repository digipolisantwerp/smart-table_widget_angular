{"ast":null,"code":"import { SmartTableColumnType } from '../smart-table.types';\nimport { DatePipe } from '@angular/common';\nimport { SmartTableFilter } from '../components/filter/smart-table.filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let TableFactory = /*#__PURE__*/(() => {\n  class TableFactory {\n    constructor(datePipe) {\n      this.datePipe = datePipe;\n    }\n    createTableColumnFromConfig(columnConfig, columnTypes, options) {\n      const column = {\n        value: columnConfig.key,\n        label: columnConfig.label,\n        hidden: !(columnConfig.visible || columnConfig.visible == null),\n        disableSorting: !columnConfig.sortPath\n      };\n      if (columnConfig.visible || columnConfig.visible == null) {\n        if (Array.isArray(columnConfig.classList) && columnConfig.classList.length) {\n          column.classList = columnConfig.classList;\n        }\n        const columnType = columnTypes.find(ct => ct.name === columnConfig.type);\n        if (columnType) {\n          column.format = columnType.format;\n          column.component = columnType.component;\n        } else {\n          switch (columnConfig.type) {\n            case SmartTableColumnType.DateTime:\n              {\n                column.format = value => {\n                  let returnValue;\n                  try {\n                    returnValue = this.datePipe.transform(value, options && options.columnDateTimeFormat || 'dd/MM/yyyy - hh:mm');\n                  } catch (err) {\n                    returnValue = '';\n                  }\n                  return returnValue;\n                };\n                break;\n              }\n            case SmartTableColumnType.Date:\n              {\n                column.format = value => {\n                  let returnValue;\n                  try {\n                    returnValue = this.datePipe.transform(value, options && options.columnDateFormat || 'dd/MM/yyyy');\n                  } catch (err) {\n                    returnValue = '';\n                  }\n                  return returnValue;\n                };\n                break;\n              }\n          }\n        }\n      }\n      return column;\n    }\n    createSmartFilterFromConfig(filterConfig) {\n      return new SmartTableFilter(filterConfig);\n    }\n  }\n  TableFactory.ɵfac = function TableFactory_Factory(t) {\n    return new (t || TableFactory)(i0.ɵɵinject(i1.DatePipe));\n  };\n  TableFactory.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TableFactory,\n    factory: TableFactory.ɵfac\n  });\n  return TableFactory;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}