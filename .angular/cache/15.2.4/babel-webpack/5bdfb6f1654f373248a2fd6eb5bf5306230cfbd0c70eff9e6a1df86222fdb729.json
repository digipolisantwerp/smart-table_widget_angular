{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { SmartTableFilter } from './smart-table.filter';\nexport class AbstractFilterComponent {\n  constructor() {\n    this.optional = false;\n    this.update = new EventEmitter();\n    this.formControl = new FormControl();\n    this.destroy$ = new Subject();\n    this.id = `filter-${_.uniqueId()}`;\n    this.formControl.valueChanges.pipe(takeUntil(this.destroy$), debounceTime(200), tap(newValue => this.onFilter(newValue))).subscribe();\n  }\n  ngOnChanges(changes) {\n    if (!!changes.filter.currentValue) {\n      this.update.pipe(takeUntil(this.destroy$), tap(value => this.filter.valueChanges$.next(value))).subscribe();\n    }\n  }\n  onFilter(value) {\n    if (this.filter) {\n      this.filter.value = value;\n    }\n    this.update.emit({\n      filter: this.filter,\n      value\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n__decorate([Input(), __metadata(\"design:type\", SmartTableFilter)], AbstractFilterComponent.prototype, \"filter\", void 0);\n__decorate([Input(), __metadata(\"design:type\", Object)], AbstractFilterComponent.prototype, \"optional\", void 0);\n__decorate([Output(), __metadata(\"design:type\", Object)], AbstractFilterComponent.prototype, \"update\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}