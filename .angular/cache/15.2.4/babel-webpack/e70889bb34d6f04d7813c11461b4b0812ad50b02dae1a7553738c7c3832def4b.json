{"ast":null,"code":"import { parse } from \"date-fns\";\nimport { zonedTimeToUtc } from \"date-fns-tz\";\nvar addLeadingZero = function () {\n    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n      strValue = String(value);\n    return strValue.length >= 2 ? strValue : 0 === strValue.length ? \"00\" : \"0\" + strValue;\n  },\n  parseDate = function (d) {\n    var format = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n    if (void 0 === d || null === d || !1 == !!d || d instanceof Array) return null;\n    if (d instanceof Date) return isNaN(d.valueOf()) ? null : d;\n    var date = format ? parse(d, format, new Date()) : new Date(Date.parse(d));\n    return isNaN(date.getTime()) ? null : zonedTimeToUtc(date, \"UTC\");\n  },\n  getMonthLength = function (date) {\n    if (!parseDate(date)) return -1;\n    var monthStart = new Date(date),\n      monthEnd = new Date(date);\n    return monthStart.setDate(1), monthEnd.setMonth(monthStart.getMonth() + 1, 1), Math.round((monthEnd - monthStart) / 864e5);\n  },\n  closestDateForRange = function (date, range) {\n    if (!parseDate(date)) return null;\n    if (!range || !Array.isArray(range)) return new Date(date);\n    var monthLength = getMonthLength(date),\n      dates = Array.from(Array(monthLength), function (val, index) {\n        return index + 1;\n      }).filter(function (val) {\n        return range.indexOf(val) < 0;\n      }),\n      startDate = date.getDate(),\n      closestDay = dates.reduce(function (prev, curr) {\n        return Math.abs(curr - startDate) < Math.abs(prev - startDate) ? curr : prev;\n      }, -1),\n      closestDate = new Date(date);\n    return closestDate.setDate(closestDay), closestDate;\n  },\n  dateOutOfRange = function (date, range) {\n    return !!parseDate(date) && (!range || !Array.isArray(range) || range.indexOf(date.getDate()) < 0);\n  },\n  dateValuesAreEqual = function () {\n    var dates = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n      comparator = arguments[1];\n    return comparator in new Date() && dates.map(function (date) {\n      return parseDate(date) ? date[comparator]() : -1;\n    }).reduce(function (acc, curr, i) {\n      return 0 === i ? acc = curr : acc >= 0 && curr >= 0 && acc === curr ? acc : -1;\n    }) >= 0;\n  },\n  datesAreEqual = function () {\n    var dates = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n      specifier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"value\";\n    if (!dates.length) return !1;\n    var compareMethods = {\n        Y: \"getFullYear\",\n        M: \"getMonth\",\n        D: \"getDate\",\n        h: \"getHours\",\n        m: \"getMinutes\",\n        s: \"getSeconds\",\n        ms: \"getMilliseconds\",\n        value: \"valueOf\"\n      },\n      compareDates = function (d, s) {\n        var verifiedSpecifier = compareMethods.hasOwnProperty(s) ? compareMethods[s] : compareMethods.value;\n        return dateValuesAreEqual(d, verifiedSpecifier);\n      };\n    if (Array.isArray(specifier)) {\n      for (var i = 0; i < specifier.length; i += 1) if (!compareDates(dates, specifier[i])) return !1;\n      return !0;\n    }\n    return compareDates(dates, specifier);\n  },\n  DEFAULT_FORMATTING_OPTIONS = {\n    leadingZero: !1,\n    monthLabels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    weekdayLabels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n  },\n  getWeekday = function (date) {\n    var startOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    if (!parseDate(date)) return -1;\n    var weekday = (date.getDay() - startOfWeek) % 7;\n    return weekday < 0 ? weekday + 7 : weekday;\n  },\n  classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n    }\n    return target;\n  },\n  formatDate = function (dateString) {\n    var format = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\",\n      options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n      date = parseDate(dateString);\n    if (!date) return null;\n    var formattingOptions = _extends({}, DEFAULT_FORMATTING_OPTIONS, options),\n      formats = {\n        YY: function (d) {\n          return addLeadingZero(String(d.getFullYear()).substr(2), formattingOptions.leadingZero);\n        },\n        YYYY: function (d) {\n          return addLeadingZero(d.getFullYear(), formattingOptions.leadingZero);\n        },\n        MM: function (d) {\n          return addLeadingZero(d.getMonth() + 1, formattingOptions.leadingZero);\n        },\n        MMMM: function (d) {\n          return addLeadingZero(formattingOptions.monthLabels[d.getMonth()], formattingOptions.leadingZero);\n        },\n        DD: function (d) {\n          return addLeadingZero(d.getDate(), formattingOptions.leadingZero);\n        },\n        DDDD: function (d) {\n          return addLeadingZero(formattingOptions.weekdayLabels[getWeekday(d, options.startOfWeek)], formattingOptions.leadingZero);\n        },\n        hh: function (d) {\n          return addLeadingZero(d.getHours(), formattingOptions.leadingZero);\n        },\n        mm: function (d) {\n          return addLeadingZero(d.getMinutes(), formattingOptions.leadingZero);\n        },\n        ss: function (d) {\n          return addLeadingZero(d.getSeconds(), formattingOptions.leadingZero);\n        },\n        ms: function (d) {\n          return addLeadingZero(d.getMilliseconds(), formattingOptions.leadingZero);\n        }\n      };\n    return format.split(/[^YMDhms]/).reduce(function (acc, curr) {\n      return formats.hasOwnProperty(curr) ? acc.replace(curr, formats[curr](date)) : acc;\n    }, format);\n  },\n  getFirstWeekdayOfMonth = function (date) {\n    var startOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    if (!parseDate(date)) return -1;\n    var providedDate = new Date(date);\n    return providedDate.setDate(1), getWeekday(providedDate, startOfWeek);\n  },\n  getLastWeekdayOfMonth = function (date) {\n    var startOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    if (!parseDate(date)) return -1;\n    var providedDate = new Date(date),\n      monthLength = getMonthLength(providedDate);\n    return providedDate.setDate(monthLength), getWeekday(providedDate, startOfWeek);\n  },\n  updateDate = function (date, day) {\n    if (!parseDate(date) || isNaN(parseInt(day, 10))) return date;\n    var targetDate = new Date(date),\n      targetMonthLength = getMonthLength(targetDate);\n    return day > targetMonthLength ? targetDate.setDate(targetMonthLength) : targetDate.setDate(day), targetDate;\n  },\n  updateMonth = function (date, month) {\n    if (!parseDate(date) || isNaN(parseInt(month, 10))) return date;\n    var targetDate = new Date(date),\n      day = targetDate.getDate(),\n      year = targetDate.getFullYear();\n    return month > 11 ? (year += 1, month -= 12) : month < 0 && (year -= 1, month += 12), targetDate.setDate(1), targetDate.setMonth(month), targetDate.setFullYear(year), updateDate(targetDate, day);\n  },\n  week = function (start) {\n    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      padding = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],\n      offset = options.hasOwnProperty(\"offset\") ? options.offset : 0,\n      dayOffset = options.hasOwnProperty(\"dayOffset\") ? options.dayOffset : 0,\n      addPadding = options.hasOwnProperty(\"padding\") && options.padding,\n      fromStart = options.hasOwnProperty(\"fromStart\") && options.fromStart;\n    start = start || (dayOffset > 0 ? 0 : 1);\n    for (var val, weekLength = addPadding ? 7 : 7 - offset, week = [], i = start; i < start + weekLength; i += 1) if (val = i, addPadding && (fromStart ? val < start + offset : val > start + (6 - offset))) {\n      if (addPadding) {\n        var paddingIndex = fromStart ? i - start : i - start - (7 - offset);\n        week.push({\n          date: padding.length ? padding[paddingIndex] : null,\n          padding: !0\n        });\n      }\n    } else week.push({\n      date: (fromStart && addPadding ? i - offset : i) + dayOffset\n    });\n    return week;\n  },\n  padding = function (date) {\n    var count = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n      fromStart = arguments[2],\n      padding = [];\n    if (!parseDate(date)) return padding;\n    for (var targetMonth = updateMonth(date, fromStart ? date.getMonth() - 1 : date.getMonth() + 1), monthLength = getMonthLength(targetMonth), i = 0; i < count && (padding.push(fromStart ? monthLength - (count - i - 1) : padding.length + 1), fromStart || !(i >= monthLength)); i += 1);\n    return padding;\n  },\n  month = function (date) {\n    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    if (!parseDate(date)) return [];\n    for (var startOfWeek = options.startOfWeek || 0, monthLength = getMonthLength(date), startOfMonth = getFirstWeekdayOfMonth(date, startOfWeek), endOfMonth = getLastWeekdayOfMonth(date, startOfWeek), offsetStart = startOfMonth, offsetEnd = monthLength - endOfMonth, firstWeek = week(0, {\n        offset: offsetStart,\n        dayOffset: startOfWeek,\n        fromStart: !0,\n        padding: options.padding\n      }, options.generatePadding ? padding(date, offsetStart, !0) : []), lastWeek = week(offsetEnd, {\n        offset: 6 - endOfMonth,\n        padding: options.padding\n      }, options.generatePadding ? padding(date, offsetEnd) : []), wholeWeeks = Math.floor((lastWeek[0].date - firstWeek[firstWeek.length - 1].date) / 7), weeks = [firstWeek], i = 0; i < wholeWeeks; i += 1) {\n      var currDate = weeks[i][weeks[i].length - 1].date + 1;\n      weeks.push(week(currDate));\n    }\n    return weeks.push(lastWeek), weeks;\n  },\n  range = function (date, range) {\n    var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    if (!parseDate(date) || !range || range && !range.length) return [];\n    var dateRange = [],\n      weekdays = [];\n    return range.forEach(function (value) {\n      if (value instanceof Date) {\n        var dateValue = (rangeDate = value) instanceof Date && datesAreEqual([date, rangeDate], [\"Y\", \"M\"]) ? rangeDate.getDate() : null;\n        return !!dateValue && dateRange.push(dateValue);\n      }\n      var rangeDate;\n      isNaN(parseInt(value, 10)) || weekdays.push(value);\n    }), weekdays.length && (dateRange = dateRange.concat(function (targetDate, weekdays, _ref) {\n      for (var _ref$startOfWeek = _ref.startOfWeek, offset = getFirstWeekdayOfMonth(date, void 0 === _ref$startOfWeek ? 0 : _ref$startOfWeek), monthLength = getMonthLength(date), dateRange = [], i = 0; i < monthLength; i += 1) weekdays.indexOf((i + offset) % 7) >= 0 && dateRange.push(i + 1);\n      return dateRange;\n    }(0, weekdays, options))), dateRange.reduce(function (acc, curr) {\n      return acc.indexOf(curr) >= 0 ? acc : acc.concat(curr);\n    }, []).sort(function (val1, val2) {\n      return val1 - val2;\n    });\n  },\n  DateHelper = function DateHelper() {\n    classCallCheck(this, DateHelper);\n  };\nDateHelper.addLeadingZero = addLeadingZero, DateHelper.closestDateForRange = closestDateForRange, DateHelper.dateOutOfRange = dateOutOfRange, DateHelper.datesAreEqual = datesAreEqual, DateHelper.dateValuesAreEqual = dateValuesAreEqual, DateHelper.formatDate = formatDate, DateHelper.getFirstWeekdayOfMonth = getFirstWeekdayOfMonth, DateHelper.getLastWeekdayOfMonth = getLastWeekdayOfMonth, DateHelper.getMonthLength = getMonthLength, DateHelper.getWeekday = getWeekday, DateHelper.parseDate = parseDate, DateHelper.updateDate = updateDate, DateHelper.updateMonth = updateMonth;\nvar DateGenerator = function DateGenerator() {\n  classCallCheck(this, DateGenerator);\n};\nDateGenerator.generateMonth = month, DateGenerator.generatePadding = padding, DateGenerator.generateRange = range, DateGenerator.generateWeek = week;\nexport { addLeadingZero, closestDateForRange, dateOutOfRange, datesAreEqual, dateValuesAreEqual, formatDate, getFirstWeekdayOfMonth, getLastWeekdayOfMonth, getMonthLength, getWeekday, parseDate, updateDate, updateMonth, month as generateMonth, padding as generatePadding, range as generateRange, week as generateWeek, DEFAULT_FORMATTING_OPTIONS, DateHelper, DateGenerator };\n//# sourceMappingURL=acpaas-ui-js-date-utils.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}