{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as queryString from 'query-string';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { first, map } from 'rxjs/operators';\nimport { SMARTTABLE_DEFAULT_OPTIONS } from '../components/smart-table/smart-table.defaults';\nimport { PROVIDE_CONFIG, PROVIDE_ID } from '../providers/indentifier.provider';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst EXCEL_EXTENSION = '.xlsx';\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, storageIdentifier, moduleConfig) {\n      this.http = http;\n      this.storageIdentifier = storageIdentifier;\n      this.moduleConfig = moduleConfig;\n    }\n    getConfiguration(apiUrl, headers) {\n      if (!headers) {\n        headers = new HttpHeaders();\n      }\n      return (this.moduleConfig.options && this.moduleConfig.options.noConfigApiCall === true ? of({\n        columns: [],\n        filters: [],\n        baseFilters: [],\n        options: {}\n      }) : this.http.get(`${apiUrl}/config`, {\n        headers\n      })).pipe(first(), map(configuration => {\n        // Start of with default options and override\n        // those with whatever options we get from the configuration\n        return Object.assign(Object.assign({}, configuration), {\n          baseFilters: configuration.baseFilters || [],\n          options: Object.assign(Object.assign({}, SMARTTABLE_DEFAULT_OPTIONS), configuration.options)\n        });\n      }), map(config => {\n        // Override the storage identifier is we configured it in the module\n        if (this.storageIdentifier) {\n          return Object.assign(Object.assign({}, config), {\n            options: Object.assign(Object.assign({}, config.options), {\n              storageIdentifier: config.options.storageIdentifier || this.storageIdentifier\n            })\n          });\n        } else {\n          return config;\n        }\n      }));\n    }\n    getData(apiUrl, headers, dataQuery, page, pageSize) {\n      if (!headers) {\n        headers = new HttpHeaders();\n      }\n      const queryParams = queryString.stringify(this.moduleConfig && this.moduleConfig.options && this.moduleConfig.options.useLowerCaseQueryParams === true ? {\n        page,\n        pagesize: pageSize\n      } : {\n        page,\n        pageSize\n      });\n      headers = headers.set('Content-Type', 'application/json');\n      return this.http.post(`${apiUrl}${queryParams ? `?${queryParams}` : ''}`, JSON.stringify(dataQuery), {\n        headers\n      });\n    }\n    getAllData(apiUrl, headers, dataQuery) {\n      if (!headers) {\n        headers = new HttpHeaders();\n      }\n      headers = headers.set('Content-Type', 'application/json');\n      return this.http.post(`${apiUrl}/all`, JSON.stringify(dataQuery), {\n        headers\n      });\n    }\n    exportAsExcelFile(json, excelFileName) {\n      const worksheet = XLSX.utils.json_to_sheet(json);\n      const workbook = {\n        Sheets: {\n          data: worksheet\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      this.saveAsExcelFile(excelBuffer, excelFileName);\n    }\n    saveAsExcelFile(buffer, fileName) {\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PROVIDE_ID), i0.ɵɵinject(PROVIDE_CONFIG));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}