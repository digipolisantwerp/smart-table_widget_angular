{"ast":null,"code":"import { Injectable, Inject, InjectionToken, NgModule } from '@angular/core';\nimport { WINDOW, WINDOW_PROVIDERS, WindowModule } from '@acpaas-ui/ngx-utils';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/memory.storage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nlet MemoryStorage = /*#__PURE__*/(() => {\n  class MemoryStorage {\n    constructor() {\n      this.items = {};\n    }\n    /**\n     * @return {?}\n     */\n    get length() {\n      return Object.keys(this.items).length;\n    }\n    /**\n     * @return {?}\n     */\n    clear() {\n      this.items = {};\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    getItem(key) {\n      return this.items.key;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    key(index) {\n      return Object.keys(this.items)[index];\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    removeItem(key) {\n      delete this.items.key;\n    }\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    setItem(key, value) {\n      this.items.key = value;\n    }\n  }\n  MemoryStorage.ɵfac = function MemoryStorage_Factory(t) {\n    return new (t || MemoryStorage)();\n  };\n  MemoryStorage.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MemoryStorage,\n    factory: MemoryStorage.ɵfac\n  });\n  return MemoryStorage;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MemoryStorage.prototype.items;\n  /* Skipping unhandled member: [name: string]: any;*/\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/factories/storage.factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet StorageFactory = /*#__PURE__*/(() => {\n  class StorageFactory {\n    /**\n     * @param {?} window\n     * @param {?} memoryStorage\n     */\n    constructor(window, memoryStorage) {\n      this.window = window;\n      this.memoryStorage = memoryStorage;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    getStorageType(type) {\n      switch (type) {\n        case 'localStorage':\n          return window.localStorage;\n        case 'sessionStorage':\n          return window.sessionStorage;\n        case 'memory':\n          return this.memoryStorage;\n      }\n    }\n  }\n  StorageFactory.ɵfac = function StorageFactory_Factory(t) {\n    return new (t || StorageFactory)(ɵngcc0.ɵɵinject(WINDOW), ɵngcc0.ɵɵinject(MemoryStorage));\n  };\n  StorageFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StorageFactory,\n    factory: StorageFactory.ɵfac\n  });\n  /** @nocollapse */\n  return StorageFactory;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StorageFactory.prototype.window;\n  /**\n   * @type {?}\n   * @private\n   */\n  StorageFactory.prototype.memoryStorage;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/providers/localstorage.provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LOCALSTORAGE_CONFIG = new InjectionToken('localstorageConfig');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/providers/storage.provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst STORAGE_TOKEN = new InjectionToken('Storage_Token');\n/**\n * @param {?} factory\n * @param {?} configuration\n * @return {?}\n */\nfunction provideStorage(factory, configuration) {\n  return factory.getStorageType(configuration.storageType);\n}\n/** @type {?} */\nconst storageProvider = {\n  provide: STORAGE_TOKEN,\n  useFactory: provideStorage,\n  deps: [StorageFactory, LOCALSTORAGE_CONFIG]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/localstorage.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper service that provides\n * the storage type that was set by\n * using a configuration when importing\n * this module.\n */\nlet LocalstorageService = /*#__PURE__*/(() => {\n  class LocalstorageService {\n    /**\n     * @param {?} pStorage\n     */\n    constructor(pStorage) {\n      this.pStorage = pStorage;\n    }\n    /**\n     * @return {?}\n     */\n    get storage() {\n      return this.pStorage;\n    }\n  }\n  LocalstorageService.ɵfac = function LocalstorageService_Factory(t) {\n    return new (t || LocalstorageService)(ɵngcc0.ɵɵinject(STORAGE_TOKEN));\n  };\n  LocalstorageService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LocalstorageService,\n    factory: LocalstorageService.ɵfac\n  });\n  /** @nocollapse */\n  return LocalstorageService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  LocalstorageService.prototype.pStorage;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/localstorage.conf.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_LOCALSTORAGE_CONFIG = {\n  storageType: 'localStorage'\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/localstorage.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = DEFAULT_LOCALSTORAGE_CONFIG;\nlet LocalstorageModule = /*#__PURE__*/(() => {\n  class LocalstorageModule {\n    /**\n     * @param {?=} localstorageConfig\n     * @return {?}\n     */\n    static forRoot(localstorageConfig = DEFAULT_LOCALSTORAGE_CONFIG) {\n      return {\n        ngModule: LocalstorageModule,\n        providers: [{\n          provide: LOCALSTORAGE_CONFIG,\n          useValue: localstorageConfig\n        }, ...WINDOW_PROVIDERS, MemoryStorage, LocalstorageService, StorageFactory, storageProvider]\n      };\n    }\n  }\n  LocalstorageModule.ɵfac = function LocalstorageModule_Factory(t) {\n    return new (t || LocalstorageModule)();\n  };\n  LocalstorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LocalstorageModule\n  });\n  LocalstorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: LOCALSTORAGE_CONFIG,\n      useValue: ɵ0\n    }, ...WINDOW_PROVIDERS, MemoryStorage, LocalstorageService, StorageFactory, storageProvider],\n    imports: [WindowModule]\n  });\n  return LocalstorageModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LocalstorageModule, {\n    imports: function () {\n      return [WindowModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: acpaas-ui-ngx-localstorage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LOCALSTORAGE_CONFIG, LocalstorageModule, LocalstorageService, DEFAULT_LOCALSTORAGE_CONFIG as ɵb, MemoryStorage as ɵc, STORAGE_TOKEN as ɵd, provideStorage as ɵe, storageProvider as ɵf, StorageFactory as ɵg };\n\n//# sourceMappingURL=acpaas-ui-ngx-localstorage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}