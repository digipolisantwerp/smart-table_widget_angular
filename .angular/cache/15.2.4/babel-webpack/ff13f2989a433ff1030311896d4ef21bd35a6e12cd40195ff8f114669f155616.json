{"ast":null,"code":"import { EventEmitter, Directive, Output, Input, ContentChildren, Component, forwardRef, NgZone, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckbutton [name]=\"'SaveButton'\" [command]=\"'saveCommand'\" (click)=\"save($event)\"\n *                [icon]=\"'/save.png'\" [toolbar]=\"'customGroup,1'\" [label]=\"'Save'\">\n *      </ckbutton>\n *   </ckeditor>\n */\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"host\"];\nlet CKButtonDirective = /*#__PURE__*/(() => {\n  class CKButtonDirective {\n    constructor() {\n      this.click = new EventEmitter();\n    }\n    initialize(editor) {\n      editor.instance.addCommand(this.command, {\n        exec: evt => {\n          this.click.emit(evt);\n        }\n      });\n      editor.instance.ui.addButton(this.name, {\n        label: this.label,\n        command: this.command,\n        toolbar: this.toolbar,\n        icon: this.icon\n      });\n    }\n    ngOnInit() {\n      if (!this.name) throw new Error('Attribute \"name\" is required on <ckbutton>');\n      if (!this.command) throw new Error('Attribute \"command\" is required on <ckbutton>');\n    }\n  }\n  CKButtonDirective.ɵfac = function CKButtonDirective_Factory(t) {\n    return new (t || CKButtonDirective)();\n  };\n  CKButtonDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CKButtonDirective,\n    selectors: [[\"ckbutton\"]],\n    inputs: {\n      label: \"label\",\n      command: \"command\",\n      toolbar: \"toolbar\",\n      name: \"name\",\n      icon: \"icon\"\n    },\n    outputs: {\n      click: \"click\"\n    }\n  });\n  return CKButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * CKGroup component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\">\n *      <ckgroup [name]=\"'exampleGroup2'\" [previous]=\"'1'\" [subgroupOf]=\"'exampleGroup1'\">\n *          .\n *          .\n *      </ckgroup>\n *   </ckeditor>\n */\nlet CKGroupDirective = /*#__PURE__*/(() => {\n  class CKGroupDirective {\n    ngAfterContentInit() {\n      // Reconfigure each button's toolbar property within ckgroup to hold its parent's name\n      this.toolbarButtons.forEach(button => button.toolbar = this.name);\n    }\n    initialize(editor) {\n      editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);\n      // Initialize each button within ckgroup\n      this.toolbarButtons.forEach(button => {\n        button.initialize(editor);\n      });\n    }\n  }\n  CKGroupDirective.ɵfac = function CKGroupDirective_Factory(t) {\n    return new (t || CKGroupDirective)();\n  };\n  CKGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CKGroupDirective,\n    selectors: [[\"ckgroup\"]],\n    contentQueries: function CKGroupDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CKButtonDirective, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarButtons = _t);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      previous: \"previous\",\n      subgroupOf: \"subgroupOf\"\n    }\n  });\n  return CKGroupDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// Imports\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\nlet CKEditorComponent = /*#__PURE__*/(() => {\n  class CKEditorComponent {\n    /**\n     * Constructor\n     */\n    constructor(zone) {\n      this.zone = zone;\n      this.change = new EventEmitter();\n      this.editorChange = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.contentDom = new EventEmitter();\n      this.fileUploadRequest = new EventEmitter();\n      this.fileUploadResponse = new EventEmitter();\n      this.paste = new EventEmitter();\n      this.drop = new EventEmitter();\n      this._value = '';\n    }\n    get value() {\n      return this._value;\n    }\n    set value(v) {\n      if (v !== this._value) {\n        this._value = v;\n        this.onChange(v);\n      }\n    }\n    ngOnChanges(changes) {\n      if (changes.readonly && this.instance) {\n        this.instance.setReadOnly(changes.readonly.currentValue);\n      }\n    }\n    /**\n     * On component destroy\n     */\n    ngOnDestroy() {\n      if (this.instance) {\n        this.instance.removeAllListeners();\n        CKEDITOR.instances[this.instance.name].destroy();\n        this.instance.destroy();\n        this.instance = null;\n      }\n    }\n    /**\n     * On component view init\n     */\n    ngAfterViewInit() {\n      this.ckeditorInit(this.config || {});\n    }\n    /**\n     * On component view checked\n     */\n    ngAfterViewChecked() {\n      this.ckeditorInit(this.config || {});\n    }\n    /**\n     * Value update process\n     */\n    updateValue(value) {\n      this.zone.run(() => {\n        this.value = value;\n        this.onChange(value);\n        this.onTouched();\n        this.change.emit(value);\n      });\n    }\n    /**\n     * CKEditor init\n     */\n    ckeditorInit(config) {\n      if (typeof CKEDITOR === 'undefined') {\n        console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');\n      } else {\n        // Check textarea exists\n        if (this.instance || !this.documentContains(this.host.nativeElement)) {\n          return;\n        }\n        if (this.readonly) {\n          config.readOnly = this.readonly;\n        }\n        // CKEditor replace textarea\n        this.instance = CKEDITOR.replace(this.host.nativeElement, config);\n        // Set initial value\n        this.instance.setData(this.value);\n        // listen for instanceReady event\n        this.instance.on('instanceReady', evt => {\n          // if value has changed while instance loading\n          // update instance with current component value\n          if (this.instance.getData() !== this.value) {\n            this.instance.setData(this.value);\n          }\n          // send the evt to the EventEmitter\n          this.ready.emit(evt);\n        });\n        // CKEditor change event\n        this.instance.on('change', evt => {\n          this.onTouched();\n          let value = this.instance.getData();\n          if (this.value !== value) {\n            // Debounce update\n            if (this.debounce) {\n              if (this.debounceTimeout) clearTimeout(this.debounceTimeout);\n              this.debounceTimeout = setTimeout(() => {\n                this.updateValue(value);\n                this.debounceTimeout = null;\n              }, parseInt(this.debounce));\n              // Live update\n            } else {\n              this.updateValue(value);\n            }\n          }\n          // Original ckeditor event dispatch\n          this.editorChange.emit(evt);\n        });\n        // CKEditor blur event\n        this.instance.on('blur', evt => {\n          this.blur.emit(evt);\n        });\n        // CKEditor focus event\n        this.instance.on('focus', evt => {\n          this.focus.emit(evt);\n        });\n        // CKEditor contentDom event\n        this.instance.on('contentDom', evt => {\n          this.contentDom.emit(evt);\n        });\n        // CKEditor fileUploadRequest event\n        this.instance.on('fileUploadRequest', evt => {\n          this.fileUploadRequest.emit(evt);\n        });\n        // CKEditor fileUploadResponse event\n        this.instance.on('fileUploadResponse', evt => {\n          this.fileUploadResponse.emit(evt);\n        });\n        // CKEditor paste event\n        this.instance.on('paste', evt => {\n          this.paste.emit(evt);\n        });\n        // CKEditor drop event\n        this.instance.on('drop', evt => {\n          this.drop.emit(evt);\n        });\n        // Add Toolbar Groups to Editor. This will also add Buttons within groups.\n        this.toolbarGroups.forEach(group => {\n          group.initialize(this);\n        });\n        // Add Toolbar Buttons to Editor.\n        this.toolbarButtons.forEach(button => {\n          button.initialize(this);\n        });\n      }\n    }\n    /**\n     * Implements ControlValueAccessor\n     */\n    writeValue(value) {\n      this._value = value;\n      if (this.instance) this.instance.setData(value);\n    }\n    onChange(_) {}\n    onTouched() {}\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    documentContains(node) {\n      return document.contains ? document.contains(node) : document.body.contains(node);\n    }\n  }\n  CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n    return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n  CKEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CKEditorComponent,\n    selectors: [[\"ckeditor\"]],\n    contentQueries: function CKEditorComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CKButtonDirective, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CKGroupDirective, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarButtons = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarGroups = _t);\n      }\n    },\n    viewQuery: function CKEditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.host = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      config: \"config\",\n      readonly: \"readonly\",\n      debounce: \"debounce\"\n    },\n    outputs: {\n      change: \"change\",\n      editorChange: \"editorChange\",\n      ready: \"ready\",\n      blur: \"blur\",\n      focus: \"focus\",\n      contentDom: \"contentDom\",\n      fileUploadRequest: \"fileUploadRequest\",\n      fileUploadResponse: \"fileUploadResponse\",\n      paste: \"paste\",\n      drop: \"drop\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CKEditorComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"host\", \"\"]],\n    template: function CKEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"textarea\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return CKEditorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * CKEditorModule\n */\nlet CKEditorModule = /*#__PURE__*/(() => {\n  class CKEditorModule {}\n  CKEditorModule.ɵfac = function CKEditorModule_Factory(t) {\n    return new (t || CKEditorModule)();\n  };\n  CKEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CKEditorModule\n  });\n  CKEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return CKEditorModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CKEditorModule, {\n    declarations: function () {\n      return [CKEditorComponent, CKButtonDirective, CKGroupDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CKEditorComponent, CKButtonDirective, CKGroupDirective];\n    }\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorModule, CKEditorComponent as ɵa, CKButtonDirective as ɵb, CKGroupDirective as ɵc };\n\n//# sourceMappingURL=ng2-ckeditor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}